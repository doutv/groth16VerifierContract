// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Verifier} from "../src/GnarkSingleP256Verifier.sol";

contract GnarkP256Verifier is Test {
    Verifier public verifier;

    function setUp() public {
        verifier = new Verifier();
    }

    function testGnark() public {
        uint256[8] memory proof = [
            uint256(
                0x271FDEA6A9653D30BDD77830ACE7323A92C18618B8FCCD6F49DC86E6A16A3430
            ),
            uint256(
                0x26D8965E0B879D219B459FFD9006AAB38D7CD23A5A004776BC67C7EC1B172466
            ),
            uint256(
                0x14B5D5981A0314871836E123ED129FCBB964E3C7D8A0EE21B008C0FA195A3EB5
            ),
            uint256(
                0x03BF604D55E55C122A49B38E74A95B8EEACBC8ECE7137B3F74E4AEBF6B21ECAC
            ),
            uint256(
                0x1B984DF1DE542BE834BB54C055406158570C20CE34CF4C95C7E9AD7B0A6033F1
            ),
            uint256(
                0x24DD1B66E1829A63F5EB7C03553DCF9A8AF405D1DBC8218C9694D02E5EF586A1
            ),
            uint256(
                0x1ED9730BC03B3217A6EAFE47EFB323CCCAC67D6F034E9AC649E21D667AEE06B7
            ),
            uint256(
                0x2049E88127ECA7F6143F56F74DD59DDB5A6C2B1BE125BD6262895EBEB1D10A10
            )
        ];
        uint256[2] memory commitments = [
            uint256(
                0x125C778DC3DF6B76ACDF23DEBB606C97AA0D9ECE6567A83BBE709D11B993A68C
            ),
            uint256(
                0x1B707F8C096F2E362A84C2F5A9997133DCA1A4AECCCD3BFF96D2BAC710CD65B6
            )
        ];
        uint256[2] memory commitmentsPok = [
            uint256(
                0x131BF13D331A2448948CEDF737A049D24C489B54AEB44D0131E6023219F8FE9F
            ),
            uint256(
                0x09B87CFADC6D0B3D4913F6C6F7CAC3BDF311DE8C70F742D006B7B1998F7D37DD
            )
        ];
        // calculate public input = Hash(pkX, pkY, txHash)
        uint256[32] memory input = [
            uint256(0x0000000000000000000000000000000000000000000000000000000000000067),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint256(0x000000000000000000000000000000000000000000000000000000000000003D),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000BE),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000095),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000CA),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000E7),
            uint256(0x000000000000000000000000000000000000000000000000000000000000003E),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000BB),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000E8),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000082),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000BE),
            uint256(0x000000000000000000000000000000000000000000000000000000000000004F),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000CC),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000028),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000075),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000A8),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000EE),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000BA),
            uint256(0x000000000000000000000000000000000000000000000000000000000000007A),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000C1),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000028),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000015),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000D7),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000FC),
            uint256(0x000000000000000000000000000000000000000000000000000000000000006B),
            uint256(0x000000000000000000000000000000000000000000000000000000000000001C),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000049),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000BB),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000F5),
            uint256(0x00000000000000000000000000000000000000000000000000000000000000DE),
            uint256(0x0000000000000000000000000000000000000000000000000000000000000061)
        ];
        // Expect the transaction to succeed
        verifier.verifyProof(proof, commitments, commitmentsPok, input);

        // Expect the transaction to fail with fake proof
        // uint256[2] memory fake_a = [
        //     0x17cf6c553e4c37cebfbc64623e2d08e6ea6ff55913b1231cc0c25fd721abc36f,
        //     0x24d47f57ac26b35af9787bf1115f1b9bd50ba4c49ba8f40f43c7dc66fbd96450
        // ];
        // vm.expectRevert();
        // verifier.callVerifyProof(fake_a, b, c, public_input);
    }
}